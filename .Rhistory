library(devtools)
document()
test()
library(bis620.2023)
?create_condition_histogram
library(devtools)
document()
library(bis620.2023)
?start_shiny
document()
?use_github_action
usethis::use_github_actions("check-standard")
usethis::use_github_actions("check-standard")
usethis::use_github_action("check-standard")
usethis::use_github_action("check-standard", save_as = "r-package-test.yml")
usethis::use_github_action("check-standard")
usethis::use_github_actions("test-coverage")
usethis::use_github_action("test-coverage")
usethis::use_github_action("lint")
usethis::use_github_action("test-coverage", badge = TRUE)
usethis::use_github_action("lint", badge = TRUE)
library(devtools)
check()
library(duckdb)
library(dplyr)
library(DBI)
library(DT)
library(ggplot2)
library(ctrialsgov)
library(forcats)
# libraries needed for drawing word cloud plot
library(wordcloud)
library(RColorBrewer)
library(wordcloud2)
library(tm)
# library needed for drawing a world map
library(countrycode)
library(rworldmap)
?dbConnect
?duckdb
?file.path
?dbListTables
?tbl
?ctgov_load_duckdb_file
?ctgov_query_endpoint
?shinyApp
?fluidPage
?h5
?titlePanel
?sidebarLayout
?sidebarPanel
?textInput
?list
?mainPanel
?tabPanel
?plotOutput
?wordcloud2Output
?dataTableOutput
?dataTableOutput
?renderPlot
?renderWordcloud2
?renderDataTable
?trimws
?unlist
?strsplit
?select
?rename
?head
?collect
?summarise
?n
?countrycode
?log10
?joinCountryData2Map
?par
?mapCountryData
?Corpus
?VectorSource
?tm_map
?content_transformer
?stopwords
?TermDocumentMatrix
?as.matrix
?sort
?rowSums
?names
?data.frame
?set.seed
?wordcloud2
document()
check()
check()
check()
?fct_lump_prop
check()
library(devtools)
check()
check()
check()
?par
check()
?h3
check()
library(devtools)
document()
start_shiny()
document()
start_shiny()
library(tm)
?tm_map
?removeNumbers
?removeWords
document()
start_shiny()
?trim()
?format()
studies$start_date
studies = read.csv("studies.csv")
studies$start_date
class(studies$start_date)
document()
start_shiny()
document()
start_shiny()
View(studies)
document()
start_shiny()
usethis::use_data(interventions, overwrite = TRUE)
interventions = readRDS("interventions.rds")
S
accel = readRDS("accel.rds")
accel = readRDS("accel.rds")
document()
start_shiny()
library(devtools)
check()
setwd("~/Desktop/bis620.2023/data-raw")
studies = readRDS("studies.rds")
accel = readRDS("accel.rds")
studies = readRDS("studies.rds")
conditions = readRDS("conditions.rds")
countries = readRDS("countries.rds")
endpoints = readRDS("endpoints.rds")
interventions = readRDS("interventions.rds")
usethis::use_data(accel, overwrite = TRUE)
usethis::use_data(studies, overwrite = TRUE)
usethis::use_data(conditions, overwrite = TRUE)
usethis::use_data(countries, overwrite = TRUE)
usethis::use_data(endpoints, overwrite = TRUE)
usethis::use_data(interventions, overwrite = TRUE)
load("../data/accel.rda",verbose = TRUE)
load("../data/interventions.rda",verbose = TRUE)
load("../data/studies.rda",verbose = TRUE)
load("../data/conditions.rda",verbose = TRUE)
load("../data/countries.rda",verbose = TRUE)
load("../data/endpoints.rda",verbose = TRUE)
document()
studies
start_shiny()
accel = readRDS("accel.rds")
studies = readRDS("studies.rds")
conditions = readRDS("conditions.rds")
countries = readRDS("countries.rds")
endpoints = readRDS("endpoints.rds")
interventions = readRDS("interventions.rds")
usethis::use_data(accel, overwrite = TRUE)
usethis::use_data(studies, overwrite = TRUE)
usethis::use_data(conditions, overwrite = TRUE)
usethis::use_data(countries, overwrite = TRUE)
usethis::use_data(endpoints, overwrite = TRUE)
usethis::use_data(interventions, overwrite = TRUE)
document()
start_shiny()
document()
check()
View(countries)
setwd("~/Desktop/bis620.2023")
document
document()
document()
start_shiny()
check()
data("studies")
document()
start_shiny()
check()
?gzip
??gzip
data("studies")
View(studies)
check()
start_shiny()
?use_github_action()
?use_github_action("check-standard", badge = TRUE)
use_github_action("check-standard", badge = TRUE)
use_github_action("test-coverage", badge = TRUE)
document()
library(devtools)
load_all(bis620.2023)
document()
start_shiny()
# install.packages("devtools")
devtools::install_github("YRblack/bis620.2023")
use_test("create_endpoint_histogram")
?create_endpoint_histogram()
report()
library(devtools)
library(covr)
test()
?is.ggplot
test()
use_test("create_condition_histogram")
test()
use_test("create_interventions_pie")
use_test("create_phase_histogram")
use_test("create_start_year_histogram")
test()
test()
use_test("create_study_type_histogram_plot")
use_test("create_word_cloud_plot")
use_test("create_world_map")
test()
test()
report()
use_test("create_word_cloud_plot")
use_test("create_world_map")
use_test("start_shiny")
library(bis620.2023)
start_shiny()
shiny = start_shiny()
shiny
shiny$serverFuncSource()
shiny$onStart
shiny$options
shiny$appOptions
shiny$httpHandler()
shiny$httpHandler()
shiny$serverFuncSource()
library(devtools)
library(covr)
test()
report()
?report
start_shiny()
start_shiny()
library(bis620.2023)
start_shiny()
library(bis620.2023)
start_shiny()
start_shiny()
start_shiny()
library(bis620.2023)
start_shiny()
??expect_snapshot()
library(ctrialsgov) # devtools::install_github("presagia-analytics/ctrialsgov")
library(ctrialsgov) # devtools::install_github("presagia-analytics/ctrialsgov")
library(DBI)
library(DBI)
library(duckdb)
library(DBI)
library(duckdb)
library(dplyr)
library(dbplyr)
con = dbConnect(duckdb("ctgov.duckdb"))
dbListTables(con)
conditions = tbl(con, "conditions")
studies = tbl(con, "studies")
milestones = tbl(con, "milestones")
milestones
studies |> summarize(n = n())
studies |>
select(nct_id) |>
distinct() |>
summarize(n = n())
library(reticulate)
library(purrr)
setwd("~/Library/CloudStorage/OneDrive-YaleUniversity/Desktop/1st_Fall/BIS_620_DS_Software_system/Lecture/2023-12-04")
use_condaenv("biogpt", required = TRUE)
use_condaenv("biogpt", required = TRUE)
?install_python()
library(torch)
