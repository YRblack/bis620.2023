# Count if Type I error occurs (rejecting null when it is true)
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- TRUE
break
}
}
if (if_break){
break
}
}
# Calculate Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return the results as a list
return(list(type1.error = type1_error_rate, number.tests = total_tests))
}
# Example usage of the function
# Calculate the Type I error rate for 5 groups, each with 20 samples
result <- multtest(ngroups = 5, n = 20, seed = 234)
print(result)
# multtest Function Definition
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
set.seed(seed)
type1_error_count <- 0
total_tests <- 0
number_tests_per_sim <- choose(ngroups, 2)
for (sim in 1:nsims) {
# Simulate data for each group
# Assuming normal distribution with mean=0 and sd=1 (null hypothesis)
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Perform pairwise t-tests between all pairs of groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
total_tests <- total_tests + 1
test_result <- t.test(data[[i]], data[[j]])
# Count if Type I error occurs (rejecting null when it is true)
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- TRUE
break
}
}
if (if_break){
break
}
}
}
# Calculate Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return the results as a list
return(list(type1.error = type1_error_rate, number.tests = total_tests))
}
# Example usage of the function
# Calculate the Type I error rate for 5 groups, each with 20 samples
result <- multtest(ngroups = 5, n = 20, seed = 234)
print(result)
# multtest Function Definition
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
set.seed(seed)
type1_error_count <- 0
total_tests <- 0
number_tests_per_sim <- choose(ngroups, 2)
for (sim in 1:nsims) {
# Simulate data for each group
# Assuming normal distribution with mean=0 and sd=1 (null hypothesis)
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Perform pairwise t-tests between all pairs of groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
total_tests <- total_tests + 1
test_result <- t.test(data[[i]], data[[j]])
# Count if Type I error occurs (rejecting null when it is true)
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- TRUE
break
}
}
if (if_break){
break
}
}
}
# Calculate Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return the results as a list
return(list(type1.error = type1_error_rate, number.tests = total_tests))
}
# Example usage of the function
# Calculate the Type I error rate for 5 groups, each with 20 samples
result <- multtest(ngroups = 5, n = 20, seed = 234)
print(result)
# multtest Function Definition
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
set.seed(seed)
type1_error_count <- 0
total_tests <- 0
number_tests_per_sim <- choose(ngroups, 2)
for (sim in 1:nsims) {
# Simulate data for each group
# Assuming normal distribution with mean=0 and sd=1 (null hypothesis)
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Perform pairwise t-tests between all pairs of groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
total_tests <- total_tests + 1
test_result <- t.test(data[[i]], data[[j]])
# Count if Type I error occurs (rejecting null when it is true)
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- TRUE
break
}
}
if (if_break){
break
}
}
}
# Calculate Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return the results as a list
return(list(type1.error = type1_error_rate, number.tests = total_tests))
}
# Example usage of the function
# Calculate the Type I error rate for 5 groups, each with 20 samples
result <- multtest(ngroups = 5, n = 20, seed = 234)
print(result)
mult.test <- function(n_groups, n, seed, nsims=1000, alpha=0.05) {
set.seed(seed)
type1_error_count <- 0
number_tests_per_sim <- choose(n_groups, 2)
for (sim in 1:nsims) {
data <- lapply(1:n_groups, function(x) rnorm(n, mean = 0, sd = 1))
if_break <- F
# Perform pairwise t-tests
for (i in 1:(n_groups-1)) {
for (j in (i+1):n_groups) {
test_result <- t.test(data[[i]], data[[j]], var.equal = TRUE)
# Check for Type I error
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- T
break
}
}
if (if_break){
break
}
}
}
# Calculate the Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return a list containing the Type I error rate and the number of tests
return(list(type1_error=type1_error_rate, number_tests=number_tests_per_sim))
}
# Example usage
multtest_result <- mult.test(5, 20, 234)
multtest_result
# multtest Function Definition
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
set.seed(seed)
type1_error_count <- 0
total_tests <- 0
number_tests_per_sim <- choose(ngroups, 2)
for (sim in 1:nsims) {
# Simulate data for each group
# Assuming normal distribution with mean=0 and sd=1 (null hypothesis)
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Perform pairwise t-tests between all pairs of groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
total_tests <- total_tests + 1
test_result <- t.test(data[[i]], data[[j]])
# Count if Type I error occurs (rejecting null when it is true)
if (test_result$p.value < alpha) {
type1_error_count <- type1_error_count + 1
if_break <- TRUE
break
}
}
if (if_break){
break
}
}
}
# Calculate Type I error rate
type1_error_rate <- type1_error_count / nsims
# Return the results as a list
return(list(type1.error = type1_error_rate, number.tests = number_tests_per_sim))
}
# Example usage of the function
# Calculate the Type I error rate for 5 groups, each with 20 samples
result <- multtest(ngroups = 5, n = 20, seed = 234)
print(result)
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}if(if_break ==TRUE)
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}if(if_break ==TRUE){
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}if(if_break == TRUE){
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}if(if_break){
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}
if(if_break){
break
}
}
}
# Calculate overall type I error rate
type1.error <- type1_errors/total_test
# Return the results
x <- list(
type1.error = type1.error,
number.tests = total_test
)
return(x)
}
# Example
result <- multtest(5, 20, 234)
result
# Example
result <- multtest(5, 20, 234)
result
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}
if(if_break){
break
}
}
}
# Calculate overall type I error rate
type1.error <- type1_errors/nsims
# Return the results
x <- list(
type1.error = type1.error,
number.tests = total_test
)
return(x)
}
# Example
result <- multtest(5, 20, 234)
result
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}
if(if_break){
break
}
}
}
# Calculate overall type I error rate
type1.error <- type1_errors/nsims
# Return the results
x <- list(
type1.error = type1.error,
number.tests = choose(ngroups,2)
)
return(x)
}
# Example
result <- multtest(5, 20, 234)
result
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}
if(if_break==TRUE){
break
}
}
}
# Calculate overall type I error rate
type1.error <- type1_errors/nsims
# Return the results
x <- list(
type1.error = type1.error,
number.tests = choose(ngroups,2)
)
return(x)
}
# Example
result <- multtest(5, 20, 234)
result
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}if(if_break==TRUE){
multtest <- function(ngroups, n, seed, nsims = 1000, alpha = 0.05) {
# Set seed for reproduction
set.seed(seed)
# Initialization
type1_errors <- 0
total_test <- 0
if_break = FALSE
# Run simulations
for (sim in 1:nsims) {
# Simulate data for each group
data <- lapply(1:ngroups, function(x) rnorm(n))
if_break <- FALSE
# Create a loop to compare all the two groups
for (i in 1:(ngroups - 1)) {
for (j in (i + 1):ngroups) {
t_test_result <- t.test(data[[i]], data[[j]], alternative = "two.sided")
total_test = total_test +1
if (t_test_result$p.value < alpha) {
type1_errors <- type1_errors + 1
if_break =TRUE
break
}
}
if(if_break==TRUE){
break
}
}
}
# Calculate overall type I error rate
type1.error <- type1_errors/nsims
# Return the results
x <- list(
type1.error = type1.error,
number.tests = choose(ngroups,2)
)
return(x)
}
